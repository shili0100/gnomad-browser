"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TranscriptsTrack = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _regionViewer = require("@gnomad/region-viewer");
var _TranscriptPlot = _interopRequireDefault(require("./TranscriptPlot"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
var TranscriptWrapper = _styledComponents.default.div.withConfig({
  displayName: "TranscriptsTrack__TranscriptWrapper",
  componentId: "sc-1ottfz0-0"
})(["display:flex;margin-bottom:5px;"]);
var TranscriptLabel = _styledComponents.default.span.withConfig({
  displayName: "TranscriptsTrack__TranscriptLabel",
  componentId: "sc-1ottfz0-1"
})(["font-size:11px;"]);
var isTranscriptCoding = function isTranscriptCoding(transcript) {
  return transcript.exons.some(function (exon) {
    return exon.feature_type === 'CDS';
  });
};
var exportTranscriptsPlot = function exportTranscriptsPlot(containerElement, filename) {
  var transcriptPlots = containerElement.querySelectorAll('.transcript-plot');
  var _containerElement$get = containerElement.getBoundingClientRect(),
    width = _containerElement$get.width;
  var svgNS = 'http://www.w3.org/2000/svg';
  var plot = document.createElementNS(svgNS, 'svg');
  plot.setAttribute('width', width);
  plot.setAttribute('height', 15 * transcriptPlots.length);
  Array.from(transcriptPlots).forEach(function (plotElement, i) {
    var transcriptGroup = document.createElementNS(svgNS, 'g');
    transcriptGroup.setAttribute('transform', "translate(0,".concat(i * 15, ")"));
    plot.appendChild(transcriptGroup);
    var plotGroup = document.createElementNS(svgNS, 'g');
    plotGroup.setAttribute('transform', "translate(100 , 0)");
    plotGroup.innerHTML = plotElement.innerHTML;
    transcriptGroup.appendChild(plotGroup);
    var transcriptIdLabel = document.createElementNS(svgNS, 'text');
    transcriptIdLabel.textContent = plotElement.getAttribute('data-transcript-id');
    transcriptIdLabel.setAttribute('font-family', 'sans-serif');
    transcriptIdLabel.setAttribute('font-size', 11);
    transcriptIdLabel.setAttribute('dy', '0.7em');
    transcriptIdLabel.setAttribute('x', 0);
    transcriptIdLabel.setAttribute('y', 0);
    transcriptGroup.appendChild(transcriptIdLabel);
  });
  var serializer = new XMLSerializer();
  var data = serializer.serializeToString(plot);
  var blob = new Blob(['<?xml version="1.0" standalone="no"?>\r\n', data], {
    type: 'image/svg+xml;charset=utf-8'
  });
  var url = URL.createObjectURL(blob);
  var link = document.createElement('a');
  link.href = url;
  link.download = "".concat(filename, ".svg");
  document.body.appendChild(link);
  link.click();
  document.body.removeChild(link);
  URL.revokeObjectURL(url);
};
var TranscriptsTrack = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var renderTranscriptLeftPanel = _ref.renderTranscriptLeftPanel,
    renderTranscriptRightPanel = _ref.renderTranscriptRightPanel,
    transcripts = _ref.transcripts,
    showUTRs = _ref.showUTRs,
    showNonCodingTranscripts = _ref.showNonCodingTranscripts,
    transcriptHeight = _ref.transcriptHeight;
  var transcriptsContainer = (0, _react.useRef)(null);
  (0, _react.useImperativeHandle)(ref, function () {
    return {
      downloadPlot: function downloadPlot() {
        var filename = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'transcripts';
        exportTranscriptsPlot(transcriptsContainer.current, filename);
      }
    };
  });
  return /*#__PURE__*/_react.default.createElement("div", {
    ref: transcriptsContainer
  }, (showNonCodingTranscripts ? transcripts : transcripts.filter(isTranscriptCoding)).map(function (transcript) {
    return /*#__PURE__*/_react.default.createElement(TranscriptWrapper, {
      key: transcript.transcript_id
    }, /*#__PURE__*/_react.default.createElement(_regionViewer.Track, {
      renderLeftPanel: renderTranscriptLeftPanel ? function (_ref2) {
        var width = _ref2.width;
        return renderTranscriptLeftPanel({
          transcript: transcript,
          width: width
        });
      } : undefined,
      renderRightPanel: renderTranscriptRightPanel ? function (_ref3) {
        var width = _ref3.width;
        return renderTranscriptRightPanel({
          transcript: transcript,
          width: width
        });
      } : undefined
    }, function (_ref4) {
      var scalePosition = _ref4.scalePosition,
        width = _ref4.width;
      return /*#__PURE__*/_react.default.createElement(_TranscriptPlot.default, {
        className: "transcript-plot",
        "data-transcript-id": transcript.transcript_id,
        height: transcriptHeight,
        scalePosition: scalePosition,
        showNonCodingExons: showNonCodingTranscripts,
        showUTRs: showUTRs,
        transcript: transcript,
        width: width
      });
    }));
  }));
});
exports.TranscriptsTrack = TranscriptsTrack;
TranscriptsTrack.propTypes = {
  renderTranscriptLeftPanel: _propTypes.default.func,
  renderTranscriptRightPanel: _propTypes.default.func,
  showNonCodingTranscripts: _propTypes.default.bool,
  showUTRs: _propTypes.default.bool,
  transcriptHeight: _propTypes.default.number,
  transcripts: _propTypes.default.arrayOf(_propTypes.default.shape({
    transcript_id: _propTypes.default.string.isRequired,
    exons: _propTypes.default.arrayOf(_propTypes.default.shape({
      feature_type: _propTypes.default.string.isRequired,
      start: _propTypes.default.number.isRequired,
      stop: _propTypes.default.number.isRequired
    })).isRequired
  })).isRequired
};
TranscriptsTrack.defaultProps = {
  /* eslint-disable react/prop-types */
  renderTranscriptLeftPanel: function renderTranscriptLeftPanel(_ref5) {
    var transcript = _ref5.transcript;
    return /*#__PURE__*/_react.default.createElement(TranscriptLabel, null, transcript.transcript_id);
  },
  /* eslint-enable react/prop-types */
  renderTranscriptRightPanel: undefined,
  showNonCodingTranscripts: false,
  showUTRs: false,
  transcriptHeight: 10
};