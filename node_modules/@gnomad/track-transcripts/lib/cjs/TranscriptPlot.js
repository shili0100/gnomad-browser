"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _trackRegions = require("@gnomad/track-regions");
var _excluded = ["height", "scalePosition", "showUTRs", "showNonCodingExons", "transcript", "width"];
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var FEATURE_COLORS = {
  exon: '#bdbdbd',
  CDS: '#424242',
  UTR: '#424242'
};
var FEATURE_HEIGHT_MULTIPLIERS = {
  exon: 0.4,
  CDS: 1.0,
  UTR: 0.4
};
var FEATURE_ORDER = {
  exon: 0,
  UTR: 1,
  CDS: 2
};
var featureCompareFn = function featureCompareFn(r1, r2) {
  return FEATURE_ORDER[r1.feature_type] - FEATURE_ORDER[r2.feature_type];
};
var transcriptRegionKey = function transcriptRegionKey(region) {
  return "".concat(region.feature_type, "-").concat(region.start, "-").concat(region.stop);
};
var TranscriptPlot = function TranscriptPlot(_ref) {
  var height = _ref.height,
    scalePosition = _ref.scalePosition,
    showUTRs = _ref.showUTRs,
    showNonCodingExons = _ref.showNonCodingExons,
    transcript = _ref.transcript,
    width = _ref.width,
    otherProps = _objectWithoutProperties(_ref, _excluded);
  return /*#__PURE__*/_react.default.createElement(_trackRegions.RegionsPlot, _extends({}, otherProps, {
    height: height
    // Sort by feature type to ensure that when regions overlap, the most important region is at the front.
    ,
    regions: transcript.exons.filter(function (exon) {
      return exon.feature_type === 'CDS' || exon.feature_type === 'UTR' && showUTRs || exon.feature_type === 'exon' && showNonCodingExons;
    }).sort(featureCompareFn),
    regionKey: transcriptRegionKey,
    regionAttributes: function regionAttributes(exon) {
      return {
        fill: FEATURE_COLORS[exon.feature_type] || 'gray',
        height: height * (FEATURE_HEIGHT_MULTIPLIERS[exon.feature_type] || 1.0)
      };
    },
    scalePosition: scalePosition,
    width: width
  }));
};
TranscriptPlot.propTypes = {
  height: _propTypes.default.number,
  scalePosition: _propTypes.default.func.isRequired,
  showNonCodingExons: _propTypes.default.bool,
  showUTRs: _propTypes.default.bool,
  transcript: _propTypes.default.shape({
    exons: _propTypes.default.arrayOf(_propTypes.default.shape({
      feature_type: _propTypes.default.string.isRequired,
      start: _propTypes.default.number.isRequired,
      stop: _propTypes.default.number.isRequired
    })).isRequired
  }).isRequired,
  width: _propTypes.default.number.isRequired
};
TranscriptPlot.defaultProps = {
  height: 10,
  showNonCodingExons: false,
  showUTRs: false
};
var _default = TranscriptPlot;
exports.default = _default;