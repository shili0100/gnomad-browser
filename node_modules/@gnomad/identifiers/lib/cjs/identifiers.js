"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.parseVariantId = exports.parseRegionId = exports.normalizeVariantId = exports.normalizeRegionId = exports.isVariantId = exports.isRsId = exports.isRegionId = void 0;
// The Unicode flag is not supported in IE 11.
var isRegExpUnicodeFlagSupported = function () {
  try {
    new RegExp('test', 'u'); // eslint-disable-line no-new
    return true;
  } catch (err) {
    return false;
  }
}();

// Unicode property escapes are not supported in older versions of some browsers.
var isRegExpUnicodePropertyEscapeSupported = isRegExpUnicodeFlagSupported && function () {
  try {
    new RegExp('\\p{Pd}', 'u'); // eslint-disable-line no-new
    return true;
  } catch (err) {
    return false;
  }
}();
var CHROMOSOME = '(?:chr)?(?:\\d+|x|y|m|mt)';
var POSITION = '[\\d,]+';
var DASH = isRegExpUnicodeFlagSupported && isRegExpUnicodePropertyEscapeSupported ? '\\p{Pd}' : '-';
var SEPARATOR = "(?:".concat(DASH, "|[:./_|]|\\s+)");
var REGEXP_FLAGS = "i".concat(isRegExpUnicodeFlagSupported ? 'u' : '');
var REGION_ID_REGEX = new RegExp("^(".concat(CHROMOSOME, ")").concat(SEPARATOR, "(").concat(POSITION, ")(?:").concat(SEPARATOR, "(").concat(POSITION, ")?)?$"), REGEXP_FLAGS);
var parseRegionId = function parseRegionId(regionId) {
  var match = REGION_ID_REGEX.exec(regionId);
  if (!match) {
    throw new Error('Invalid region ID');
  }
  var chrom = match[1].toUpperCase().replace(/^chr/i, '');
  var chromNumber = Number(chrom);
  if (!Number.isNaN(chromNumber) && (chromNumber < 1 || chromNumber > 22)) {
    throw new Error('Invalid region ID');
  }
  var start = Number(match[2].replace(/,/g, ''));
  var stop = match[3] ? Number(match[3].replace(/,/g, '')) : start;
  if (stop < start) {
    throw new Error('Invalid region ID');
  }
  return {
    chrom: chrom,
    start: start,
    stop: stop
  };
};
exports.parseRegionId = parseRegionId;
var normalizeRegionId = function normalizeRegionId(regionId) {
  var _parseRegionId = parseRegionId(regionId),
    chrom = _parseRegionId.chrom,
    start = _parseRegionId.start,
    stop = _parseRegionId.stop;
  return "".concat(chrom, "-").concat(start, "-").concat(stop);
};
exports.normalizeRegionId = normalizeRegionId;
var isRegionId = function isRegionId(str) {
  try {
    parseRegionId(str);
    return true;
  } catch (err) {
    return false;
  }
};
exports.isRegionId = isRegionId;
var ALLELE = '[acgt]+';
var VARIANT_ID_REGEX = new RegExp("^(".concat(CHROMOSOME, ")").concat(SEPARATOR, "?(?:((").concat(POSITION, ")").concat(SEPARATOR, "?(").concat(ALLELE, ")(?:").concat(SEPARATOR, "|>)(").concat(ALLELE, "))|((").concat(ALLELE, ")").concat(SEPARATOR, "?(").concat(POSITION, ")").concat(SEPARATOR, "?(").concat(ALLELE, ")))$"), REGEXP_FLAGS);
var parseVariantId = function parseVariantId(variantId) {
  var match = VARIANT_ID_REGEX.exec(variantId);
  if (!match) {
    throw new Error('Invalid variant ID');
  }
  var chrom = match[1].toUpperCase().replace(/^chr/i, '');
  var chromNumber = Number(chrom);
  if (!Number.isNaN(chromNumber) && (chromNumber < 1 || chromNumber > 22)) {
    throw new Error('Invalid variant ID');
  }
  var pos;
  var ref;
  var alt;

  /* eslint-disable prefer-destructuring */
  if (match[2]) {
    // chrom-pos-ref-alt
    pos = match[3];
    ref = match[4];
    alt = match[5];
  } else {
    // chrom-ref-pos-alt
    ref = match[7];
    pos = match[8];
    alt = match[9];
  }
  /* eslint-enable prefer-destructuring */

  pos = Number(pos.replace(/,/g, ''));
  ref = ref.toUpperCase();
  alt = alt.toUpperCase();
  return {
    chrom: chrom,
    pos: pos,
    ref: ref,
    alt: alt
  };
};
exports.parseVariantId = parseVariantId;
var normalizeVariantId = function normalizeVariantId(variantId) {
  var _parseVariantId = parseVariantId(variantId),
    chrom = _parseVariantId.chrom,
    pos = _parseVariantId.pos,
    ref = _parseVariantId.ref,
    alt = _parseVariantId.alt;
  return "".concat(chrom, "-").concat(pos, "-").concat(ref, "-").concat(alt);
};
exports.normalizeVariantId = normalizeVariantId;
var isVariantId = function isVariantId(str) {
  try {
    parseVariantId(str);
    return true;
  } catch (err) {
    return false;
  }
};
exports.isVariantId = isVariantId;
var RSID_REGEX = /^rs\d+$/;
var isRsId = function isRsId(rsid) {
  return Boolean(rsid.match(RSID_REGEX));
};
exports.isRsId = isRsId;