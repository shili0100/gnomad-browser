"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.KeyboardShortcut = void 0;
var _mousetrap = _interopRequireDefault(require("mousetrap"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = require("react");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
// Mousetrap doesn't provide a way to remove individual callbacks without unbinding all
// callbacks for a key sequence.
// Wrap it to provide that functionality.
var MousetrapWrapper = /*#__PURE__*/function () {
  function MousetrapWrapper() {
    var _this = this;
    _classCallCheck(this, MousetrapWrapper);
    _defineProperty(this, "callbacks", {});
    _defineProperty(this, "onKeys", function (e, keys) {
      _this.callbacks[keys].forEach(function (cb) {
        cb(e, keys);
      });
    });
    this.mousetrap = new _mousetrap.default();
  }
  _createClass(MousetrapWrapper, [{
    key: "bind",
    value: function bind(keys, callback) {
      if (!this.callbacks[keys]) {
        this.callbacks[keys] = [];
        this.mousetrap.bind(keys, this.onKeys);
      }
      this.callbacks[keys].push(callback);
    }
  }, {
    key: "unbind",
    value: function unbind(keys, callback) {
      if (callback) {
        this.callbacks[keys] = this.callbacks[keys].filter(function (cb) {
          return cb !== callback;
        });
      } else {
        this.callbacks[keys] = [];
      }
      if (this.callbacks[keys].length === 0) {
        this.mousetrap.unbind(keys);
        this.callbacks[keys] = null;
      }
    }
  }]);
  return MousetrapWrapper;
}();
var mousetrap = new MousetrapWrapper();
var KeyboardShortcut = function KeyboardShortcut(_ref) {
  var handler = _ref.handler,
    keys = _ref.keys;
  (0, _react.useEffect)(function () {
    mousetrap.bind(keys, handler);
    return function () {
      mousetrap.unbind(keys, handler);
    };
  }, [handler, keys]);
  return null;
};
exports.KeyboardShortcut = KeyboardShortcut;
KeyboardShortcut.propTypes = {
  handler: _propTypes.default.func.isRequired,
  keys: _propTypes.default.string.isRequired
};