"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.SegmentedControl = void 0;
var _polished = require("polished");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var SegmentedControlContainer = _styledComponents.default.span.withConfig({
  displayName: "SegmentedControl__SegmentedControlContainer",
  componentId: "sc-196zff7-0"
})(["position:relative;display:inline-flex;flex-direction:row;justify-content:space-between;border-style:solid;border-width:1px;border-radius:0.5em;background-color:", ";border-color:", ";box-shadow:", ";color:", ";user-select:none;input{", ";}label{box-sizing:border-box;height:calc(2em + 2px);padding:0.375em 0.75em;cursor:pointer;font-size:1em;line-height:1.25;white-space:nowrap;&:first-of-type{border-bottom-left-radius:0.5em;border-top-left-radius:0.5em;}&:last-of-type{border-bottom-right-radius:0.5em;border-top-right-radius:0.5em;}}input:checked + label{background-color:", ";}input:disabled + label{opacity:0.5;cursor:not-allowed;}"], function (props) {
  return props.backgroundColor;
}, function (props) {
  return props.borderColor;
}, function (props) {
  return props.isFocused ? "0 0 0 0.2em ".concat((0, _polished.transparentize)(0.5, props.borderColor)) : 'none';
}, function (props) {
  return props.textColor;
}, (0, _polished.hideVisually)(), function (props) {
  return (0, _polished.darken)(0.15, props.backgroundColor);
});
var SegmentedControl = /*#__PURE__*/function (_Component) {
  _inherits(SegmentedControl, _Component);
  var _super = _createSuper(SegmentedControl);
  function SegmentedControl() {
    var _this;
    _classCallCheck(this, SegmentedControl);
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    _this = _super.call.apply(_super, [this].concat(args));
    _defineProperty(_assertThisInitialized(_this), "state", {
      isFocused: false
    });
    _defineProperty(_assertThisInitialized(_this), "onBlur", function () {
      _this.setState({
        isFocused: false
      });
    });
    _defineProperty(_assertThisInitialized(_this), "onChange", function (e) {
      var _this$props = _this.props,
        options = _this$props.options,
        onChange = _this$props.onChange;
      var selectedIndex = parseInt(e.target.value, 10);
      var selectedOption = options[selectedIndex];
      onChange(selectedOption.value);
    });
    _defineProperty(_assertThisInitialized(_this), "onFocus", function () {
      _this.setState({
        isFocused: true
      });
    });
    return _this;
  }
  _createClass(SegmentedControl, [{
    key: "render",
    value: function render() {
      var _this2 = this;
      var _this$props2 = this.props,
        backgroundColor = _this$props2.backgroundColor,
        borderColor = _this$props2.borderColor,
        disabled = _this$props2.disabled,
        id = _this$props2.id,
        options = _this$props2.options,
        textColor = _this$props2.textColor,
        value = _this$props2.value;
      var isFocused = this.state.isFocused;
      return /*#__PURE__*/_react.default.createElement(SegmentedControlContainer, {
        id: id,
        backgroundColor: backgroundColor,
        borderColor: borderColor,
        isFocused: isFocused,
        textColor: textColor
      }, options.map(function (opt, index) {
        return [/*#__PURE__*/_react.default.createElement("input", {
          key: "".concat(opt.value, "-input"),
          checked: opt.value === value,
          disabled: disabled || opt.disabled,
          id: "segmented-control-input-".concat(id, "-").concat(opt.value),
          name: id,
          type: "radio",
          value: index,
          onBlur: _this2.onBlur,
          onChange: _this2.onChange,
          onFocus: _this2.onFocus
        }),
        /*#__PURE__*/
        // eslint-disable-next-line jsx-a11y/label-has-for
        _react.default.createElement("label", {
          key: "".concat(opt.value, "-label"),
          htmlFor: "segmented-control-input-".concat(id, "-").concat(opt.value)
        }, opt.label || opt.value)];
      }));
    }
  }]);
  return SegmentedControl;
}(_react.Component);
exports.SegmentedControl = SegmentedControl;
_defineProperty(SegmentedControl, "propTypes", {
  backgroundColor: _propTypes.default.string,
  borderColor: _propTypes.default.string,
  disabled: _propTypes.default.bool,
  id: _propTypes.default.string.isRequired,
  onChange: _propTypes.default.func.isRequired,
  options: _propTypes.default.arrayOf(_propTypes.default.shape({
    disabled: _propTypes.default.bool,
    label: _propTypes.default.string,
    value: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number, _propTypes.default.string])
  })).isRequired,
  textColor: _propTypes.default.string,
  value: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number, _propTypes.default.string]).isRequired
});
_defineProperty(SegmentedControl, "defaultProps", {
  backgroundColor: '#f8f9fa',
  borderColor: '#6c757d',
  disabled: false,
  textColor: '#000'
});