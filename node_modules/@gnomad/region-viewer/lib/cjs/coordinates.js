"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.regionViewerScale = exports.mergeOverlappingRegions = void 0;
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var mergeOverlappingRegions = function mergeOverlappingRegions(regions) {
  if (regions.length === 0) {
    return [];
  }
  var mergedRegions = [_objectSpread({}, regions[0])];
  var previousRegion = mergedRegions[0];
  for (var i = 1; i < regions.length; i += 1) {
    var nextRegion = regions[i];
    if (nextRegion.start <= previousRegion.stop + 1) {
      if (nextRegion.stop > previousRegion.stop) {
        previousRegion.stop = nextRegion.stop;
      }
    } else {
      previousRegion = _objectSpread({}, nextRegion);
      mergedRegions.push(previousRegion);
    }
  }
  return mergedRegions;
};
exports.mergeOverlappingRegions = mergeOverlappingRegions;
var regionViewerScale = function regionViewerScale(domainRegions, range) {
  var totalRegionSize = domainRegions.reduce(function (acc, region) {
    return acc + (region.stop - region.start + 1);
  }, 0);
  var scale = function scale(position) {
    var distanceToPosition = domainRegions.filter(function (region) {
      return region.start <= position;
    }).reduce(function (acc, region) {
      return region.start <= position && position <= region.stop ? acc + position - region.start : acc + (region.stop - region.start + 1);
    }, 0);
    return range[0] + (range[1] - range[0]) * (distanceToPosition / totalRegionSize);
  };
  scale.invert = function (x) {
    var clampedX = Math.max(Math.min(x, range[1]), range[0]);
    var distanceToPosition = Math.floor(totalRegionSize * ((clampedX - range[0]) / (range[1] - range[0])));
    for (var i = 0; i < domainRegions.length; i += 1) {
      var region = domainRegions[i];
      var regionSize = region.stop - region.start + 1;
      if (distanceToPosition < regionSize) {
        return region.start + distanceToPosition;
      }
      distanceToPosition -= regionSize;
    }
    return domainRegions[domainRegions.length - 1].stop;
  };
  return scale;
};
exports.regionViewerScale = regionViewerScale;