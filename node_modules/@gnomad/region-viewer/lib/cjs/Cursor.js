"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Cursor = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _RegionViewer = require("./RegionViewer");
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }
function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _iterableToArrayLimit(r, l) { var t = null == r ? null : "undefined" != typeof Symbol && r[Symbol.iterator] || r["@@iterator"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }
function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }
var CursorWrapper = _styledComponents.default.div.withConfig({
  displayName: "Cursor__CursorWrapper",
  componentId: "sc-13d1ui0-0"
})(["position:relative;"]);
var CursorOverlay = _styledComponents.default.svg.withConfig({
  displayName: "Cursor__CursorOverlay",
  componentId: "sc-13d1ui0-1"
})(["position:absolute;top:0;height:100%;pointer-events:none;"]);
var Cursor = function Cursor(_ref) {
  var children = _ref.children,
    _onClick = _ref.onClick,
    renderCursor = _ref.renderCursor;
  var container = (0, _react.useRef)();
  var _useState = (0, _react.useState)(null),
    _useState2 = _slicedToArray(_useState, 2),
    cursorPosition = _useState2[0],
    setCursorPosition = _useState2[1];
  var containerX = container.current ? container.current.getBoundingClientRect().left : null;
  return /*#__PURE__*/_react.default.createElement(_RegionViewer.RegionViewerContext.Consumer, null, function (_ref2) {
    var centerPanelWidth = _ref2.centerPanelWidth,
      leftPanelWidth = _ref2.leftPanelWidth,
      scalePosition = _ref2.scalePosition;
    // To allow interaction with child tracks behind the overlaid SVG, the SVG element is styled with `pointer-events: none`.
    // This also makes it unclickable, so the click handler is placed on the parent element (which wraps the entire child
    // track(s)). Consumers are only notified if a click occurs within the center panel of the child track(s).

    // TODO: Make this focusable? Arrow keys to move cursor? ARIA role?
    // eslint-disable-next-line jsx-a11y/click-events-have-key-events,jsx-a11y/no-static-element-interactions
    return /*#__PURE__*/_react.default.createElement(CursorWrapper, {
      ref: container,
      onClick: function onClick() {
        // If cursorPosition is null, then the mouse pointer is outside the region viewer's center panel.
        if (cursorPosition !== null) {
          _onClick(scalePosition.invert(cursorPosition));
        }
      },
      onMouseEnter: function onMouseEnter(e) {
        var x = e.clientX - containerX;
        var isInCenterPanel = x >= leftPanelWidth && x <= leftPanelWidth + centerPanelWidth;
        setCursorPosition(isInCenterPanel ? x - leftPanelWidth : null);
      },
      onMouseMove: function onMouseMove(e) {
        var x = e.clientX - containerX;
        var isInCenterPanel = x >= leftPanelWidth && x <= leftPanelWidth + centerPanelWidth;
        setCursorPosition(isInCenterPanel ? x - leftPanelWidth : null);
      },
      onMouseLeave: function onMouseLeave() {
        setCursorPosition(null);
      }
    }, /*#__PURE__*/_react.default.createElement(CursorOverlay, {
      style: {
        left: "".concat(leftPanelWidth, "px"),
        width: "".concat(centerPanelWidth, "px")
      }
    }, cursorPosition && renderCursor(cursorPosition)), children);
  });
};
exports.Cursor = Cursor;
Cursor.propTypes = {
  children: _propTypes.default.node,
  onClick: _propTypes.default.func.isRequired,
  renderCursor: _propTypes.default.func
};
Cursor.defaultProps = {
  children: undefined,
  renderCursor: function renderCursor(x) {
    return /*#__PURE__*/_react.default.createElement("rect", {
      x: x - 15,
      y: 0,
      width: 30,
      height: "100%",
      fill: "none",
      stroke: "black",
      strokeDasharray: "5, 5",
      strokeWidth: 1
    });
  }
};