"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RegionViewerContext = exports.RegionViewer = void 0;
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireDefault(require("react"));
var _styledComponents = _interopRequireDefault(require("styled-components"));
var _coordinates = require("./coordinates");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var RegionViewerContext = /*#__PURE__*/_react.default.createContext();
exports.RegionViewerContext = RegionViewerContext;
var RegionViewerWrapper = _styledComponents.default.div.withConfig({
  displayName: "RegionViewer__RegionViewerWrapper",
  componentId: "sc-tk0egb-0"
})(["display:flex;flex-direction:column;"]);
var RegionViewer = function RegionViewer(_ref) {
  var children = _ref.children,
    leftPanelWidth = _ref.leftPanelWidth,
    regions = _ref.regions,
    rightPanelWidth = _ref.rightPanelWidth,
    width = _ref.width;
  var mergedRegions = (0, _coordinates.mergeOverlappingRegions)(_toConsumableArray(regions).sort(function (r1, r2) {
    return r1.start - r2.start;
  }));
  var isPositionDefined = function isPositionDefined(pos) {
    return mergedRegions.some(function (region) {
      return region.start <= pos && pos <= region.stop;
    });
  };
  var centerPanelWidth = width - (leftPanelWidth + rightPanelWidth);
  var scalePosition = (0, _coordinates.regionViewerScale)(mergedRegions, [0, centerPanelWidth]);
  var childProps = {
    centerPanelWidth: centerPanelWidth,
    isPositionDefined: isPositionDefined,
    leftPanelWidth: leftPanelWidth,
    regions: regions,
    rightPanelWidth: rightPanelWidth,
    scalePosition: scalePosition
  };
  return /*#__PURE__*/_react.default.createElement(RegionViewerWrapper, {
    style: {
      width: width
    }
  }, /*#__PURE__*/_react.default.createElement(RegionViewerContext.Provider, {
    value: childProps
  }, children));
};
exports.RegionViewer = RegionViewer;
RegionViewer.propTypes = {
  children: _propTypes.default.node,
  leftPanelWidth: _propTypes.default.number,
  regions: _propTypes.default.arrayOf(_propTypes.default.shape({
    start: _propTypes.default.number.isRequired,
    stop: _propTypes.default.number.isRequired
  })).isRequired,
  rightPanelWidth: _propTypes.default.number,
  width: _propTypes.default.number.isRequired
};
RegionViewer.defaultProps = {
  children: undefined,
  leftPanelWidth: 100,
  rightPanelWidth: 160
};