"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.VariantPlot = void 0;
var _d3Scale = require("d3-scale");
var _propTypes = _interopRequireDefault(require("prop-types"));
var _react = _interopRequireWildcard(require("react"));
var _excluded = ["children", "height", "width"];
function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }
function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
var alleleFrequencyScale = (0, _d3Scale.scaleLog)().domain([0.00001, 0.001]).range([4, 12]);
var drawEllipse = function drawEllipse(ctx, cx, cy, rx, ry) {
  var K = 0.5522848;
  var xOffset = rx * K;
  var yOffset = ry * K;
  var x1 = cx - rx;
  var y1 = cy - ry;
  var x2 = cx + rx;
  var y2 = cy + ry;
  ctx.moveTo(x1, cy);
  ctx.bezierCurveTo(x1, cy - yOffset, cx - xOffset, y1, cx, y1);
  ctx.bezierCurveTo(cx + xOffset, y1, x2, cy - yOffset, x2, cy);
  ctx.bezierCurveTo(x2, cy + yOffset, cx + xOffset, y2, cx, y2);
  ctx.bezierCurveTo(cx - xOffset, y2, x1, cy + yOffset, x1, cy);
};
var useCombinedRefs = function useCombinedRefs(refs) {
  return (0, _react.useCallback)(function (element) {
    refs.forEach(function (ref) {
      if (!ref) {
        return;
      }
      if (typeof ref === 'function') {
        ref(element);
      } else {
        ref.current = element; // eslint-disable-line no-param-reassign
      }
    });
  }, refs);
}; // eslint-disable-line react-hooks/exhaustive-deps

var Canvas = /*#__PURE__*/(0, _react.forwardRef)(function (_ref, ref) {
  var children = _ref.children,
    height = _ref.height,
    width = _ref.width,
    otherProps = _objectWithoutProperties(_ref, _excluded);
  var element = (0, _react.useRef)(null);
  var refs = useCombinedRefs([element, ref]);
  var scale = window.devicePixelRatio || 1;
  (0, _react.useEffect)(function () {
    if (!element.current) {
      return;
    }
    var context = element.current.getContext('2d');
    context.setTransform(scale, 0, 0, scale, 0, 0);
    children(context);
  });
  return /*#__PURE__*/_react.default.createElement("canvas", _extends({}, otherProps, {
    ref: refs,
    height: height * scale,
    width: width * scale,
    style: {
      height: "".concat(height, "px"),
      width: "".concat(width, "px")
    }
  }));
});
Canvas.propTypes = {
  children: _propTypes.default.func.isRequired,
  height: _propTypes.default.number.isRequired,
  width: _propTypes.default.number.isRequired
};
var VariantPlot = function VariantPlot(_ref2) {
  var height = _ref2.height,
    scalePosition = _ref2.scalePosition,
    variants = _ref2.variants,
    variantColor = _ref2.variantColor,
    width = _ref2.width,
    onHoverVariants = _ref2.onHoverVariants;
  var canvas = (0, _react.useRef)(null);
  var variantsWithX = variants.map(function (variant) {
    return {
      variant: variant,
      x: scalePosition(variant.pos)
    };
  });
  var findNearbyVariants = function findNearbyVariants(x) {
    var threshold = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 3;
    // TODO: optimize this using binary search in a copy of variants sorted by x
    return variantsWithX.map(function (_ref3) {
      var variant = _ref3.variant,
        variantX = _ref3.x;
      return {
        variant: variant,
        distance: Math.abs(x - variantX)
      };
    }).filter(function (_ref4) {
      var distance = _ref4.distance;
      return distance <= threshold;
    }).sort(function (_ref5, _ref6) {
      var d1 = _ref5.distance;
      var d2 = _ref6.distance;
      return d1 - d2;
    }).map(function (_ref7) {
      var variant = _ref7.variant;
      return variant;
    });
  };
  var onMouseLeave;
  var onMouseMove;
  if (onHoverVariants) {
    onMouseMove = function onMouseMove(e) {
      var x = e.clientX - canvas.current.getBoundingClientRect().left;
      onHoverVariants(findNearbyVariants(x));
    };
    onMouseLeave = function onMouseLeave() {
      onHoverVariants([]);
    };
  }
  return /*#__PURE__*/_react.default.createElement(Canvas, {
    ref: canvas,
    height: height,
    width: width,
    onMouseMove: onMouseMove,
    onMouseLeave: onMouseLeave
  }, function (ctx) {
    var markerY = height / 2;
    ctx.clearRect(0, 0, width, height);
    ctx.lineWidth = 0.5;
    ctx.strokeStyle = '#000';
    variantsWithX.forEach(function (_ref8) {
      var variant = _ref8.variant,
        x = _ref8.x;
      var rx;
      var ry;
      var fill = variantColor(variant);
      if (!variant.allele_freq) {
        rx = 1;
        ry = 1;
      } else {
        rx = 3;
        ry = alleleFrequencyScale(variant.allele_freq);
      }
      ctx.beginPath();
      drawEllipse(ctx, x, markerY, rx, ry);
      ctx.closePath();
      ctx.fillStyle = fill;
      ctx.fill();
      ctx.lineWidth = 0.5;
      ctx.setLineDash([]);
      ctx.stroke();
      if (variant.isHighlighted) {
        ctx.beginPath();
        drawEllipse(ctx, x, markerY, rx + 5, ry + 5);
        ctx.closePath();
        ctx.lineWidth = 1;
        ctx.setLineDash([3, 3]);
        ctx.stroke();
      }
    });
  });
};
exports.VariantPlot = VariantPlot;
VariantPlot.propTypes = {
  height: _propTypes.default.number,
  scalePosition: _propTypes.default.func.isRequired,
  variants: _propTypes.default.arrayOf(_propTypes.default.shape({
    allele_freq: _propTypes.default.number,
    consequence: _propTypes.default.string,
    isHighlighted: _propTypes.default.bool,
    pos: _propTypes.default.number.isRequired,
    variant_id: _propTypes.default.string.isRequired
  })).isRequired,
  variantColor: _propTypes.default.func,
  width: _propTypes.default.number.isRequired,
  onHoverVariants: _propTypes.default.func
};
VariantPlot.defaultProps = {
  height: 60,
  variantColor: function variantColor() {
    return '#757575';
  },
  onHoverVariants: undefined
};